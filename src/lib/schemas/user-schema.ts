import { z } from 'zod';

/**
 * Base User Schema - Single source of truth for user field definitions
 */
const baseUserSchema = z.object({
  USER_ID: z.string().min(1, 'User ID is required'),
  USER_NAME: z.email('Must be a valid email address'),
  NAME: z.string().min(1, 'Name is required').max(100, 'Name too long'),
  PASSWORD: z.string().min(6, 'Password must be at least 6 characters'),
  USER_ROLE: z.string().min(1, 'User role is required'),
  ACTIVE: z.enum(['Y', 'N']).default('Y'),
  LOOKUP_VALUES: z.string().min(1, 'Lookup values are required'),
  // Optional fields that may not be present for all users
  BATCH_NAME: z.string().optional(),
  DEPARTMENT: z.string().optional(),
});

/**
 * Complete User Schema - Full user object from API
 */
export const userSchema = baseUserSchema;

/**
 * User Create Schema - For creating new users
 * Excludes USER_ID as it's generated by the server
 */
export const userCreateSchema = baseUserSchema.omit({ USER_ID: true });

/**
 * User Update Schema - For updating existing users
 * All fields optional except USER_ID
 */
export const userUpdateSchema = baseUserSchema
  .partial()
  .required({ USER_ID: true });

/**
 * User Form Schema for Create - Used in React Hook Form
 * Password is required for new users
 */
export const userFormCreateSchema = baseUserSchema.omit({ USER_ID: true });

/**
 * User Form Schema for Edit - Used in React Hook Form
 * Password is optional (empty means keep current password)
 */
export const userFormEditSchema = baseUserSchema
  .omit({ USER_ID: true })
  .extend({
    PASSWORD: z.string().refine((val) => val === '' || val.length >= 6, {
      message:
        'Password must be at least 6 characters or empty to keep current password',
    }),
  });

/**
 * Unified User Form Schema - Used in React Hook Form for both create and edit
 * Password validation handled at runtime based on mode
 */
export const userFormSchema = z.object({
  USER_NAME: z.string().email('Must be a valid email address'),
  NAME: z.string().min(1, 'Name is required').max(100, 'Name too long'),
  PASSWORD: z.string(), // Validation handled at runtime
  USER_ROLE: z.string().min(1, 'User role is required'),
  ACTIVE: z.enum(['Y', 'N']), // Required field, no default
  LOOKUP_VALUES: z.string().min(1, 'Lookup values are required'),
  BATCH_NAME: z.string().optional(),
  DEPARTMENT: z.string().optional(),
});

/**
 * User Partial Update Schema - For PATCH operations
 * Only the fields that are being updated (excludes USER_ID)
 */
export const userPartialUpdateSchema = baseUserSchema
  .omit({ USER_ID: true })
  .partial();

/**
 * User Query Schema - For filtering and searching users
 * Extends base schema fields as optional filters plus pagination/sorting
 */
export const userQuerySchema = baseUserSchema
  .omit({ PASSWORD: true }) // Don't allow password in queries
  .partial()
  .extend({
    // Pagination
    page: z.coerce.number().int().positive().default(1),
    limit: z.coerce.number().int().positive().max(100).default(10),
    // Sorting
    sortBy: z.enum(['USER_NAME', 'NAME', 'ACTIVE', 'USER_ROLE']).optional(),
    sortOrder: z.enum(['asc', 'desc']).default('asc'),
    // Search
    search: z.string().optional(),
  });

/**
 * User List Response Schema - API response with pagination
 */
export const userListResponseSchema = z.object({
  data: z.array(userSchema),
  currentPage: z.number().int().positive(),
  totalPages: z.number().int().positive(),
  totalcount: z.number().int().nonnegative(),
});

/**
 * Single User Response Schema - API response for single user operations
 * Returns the user object directly (not wrapped in data property)
 */
export const userResponseSchema = userSchema;

/**
 * User Delete Response Schema - API response for delete operations
 */
export const userDeleteResponseSchema = z.object({
  success: z.boolean(),
  message: z.string(),
  deletedUserId: z.string().optional(),
});

/**
 * User ID Params Schema - For route parameters
 */
export const userParamsSchema = z.object({
  USER_ID: z.string().min(1, 'User ID is required'),
});

// Export TypeScript types
export type User = z.infer<typeof userSchema>;
export type UserCreate = z.infer<typeof userCreateSchema>;
export type UserUpdate = z.infer<typeof userUpdateSchema>;
export type UserPartialUpdate = z.infer<typeof userPartialUpdateSchema>;
export type UserQuery = z.infer<typeof userQuerySchema>;
export type UserListResponse = z.infer<typeof userListResponseSchema>;
export type UserResponse = z.infer<typeof userResponseSchema>;
export type UserDeleteResponse = z.infer<typeof userDeleteResponseSchema>;
export type UserParams = z.infer<typeof userParamsSchema>;
export type UserFormCreate = z.infer<typeof userFormCreateSchema>;
export type UserFormEdit = z.infer<typeof userFormEditSchema>;
export type UserForm = z.infer<typeof userFormSchema>;
