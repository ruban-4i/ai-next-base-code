# Route Generation Task Planning

## Overview

When creating new routes end-to-end, always generate a structured task file first for manual review and approval before implementation. This ensures proper planning, consistency, and allows for adjustments before code generation.

## Process Flow

1. **User Request**: User provides URL and data shape to create a new route
2. **Interactive Clarification**: AI asks follow-up questions to understand requirements
3. **Task File Generation**: AI generates a detailed task file in `.cursor/tasks/` based on clarifications
4. **Manual Review**: User reviews and updates the task file as needed
5. **Approval**: User says "go ahead" or similar confirmation
6. **Implementation**: AI executes the tasks listed in the task file

## Interactive Clarification Process

Before generating the task file, AI must ask specific clarification questions to understand the exact requirements. This ensures the generated task file matches the user's needs precisely.

### Required Clarification Questions

#### 1. Table Display Fields

**Question Format:**

```
Based on the data shape you provided, here are all available fields:
[List all fields from data shape]

Which fields should be displayed in the table view? Please copy and paste the fields you want to show, or specify them clearly.
```

**Purpose**: Determine which fields to include in the list view table columns

#### 2. Form Fields and Data Types

**Question Format:**

```
For the create/edit form, please specify:

Available fields and their data types:
[Field name] - [Inferred type based on sample data]
- If field has values like "Y"/"N" or "true"/"false" → Switch/Toggle component
- If field is a date → Date picker component
- If field has limited options → Select dropdown
- If field is long text → Textarea component
- Otherwise → Text input

Which fields should be included in the form and what are their specific data types/components?
```

**Purpose**: Determine form structure and appropriate UI components

#### 3. CRUD Operation Scope

**Question Format:**

```
What CRUD operations do you need for this route?
- [ ] Create (C) - Add new records
- [ ] Read (R) - List and view records
- [ ] Update (U) - Edit existing records
- [ ] Delete (D) - Remove records

Please specify: Complete CRUD, Read-only, or specific operations only?
```

**Purpose**: Determine which operations to implement

#### 4. Additional Features

**Question Format:**

```
Do you need any additional features?
- [ ] Search/Filter functionality
- [ ] Pagination (default: server-side pagination)
- [ ] Sorting by specific fields
- [ ] Bulk operations (bulk delete, bulk update)
- [ ] Export functionality (CSV, PDF)
- [ ] Import functionality
- [ ] Status management (active/inactive)
- [ ] Audit trail (created/updated timestamps)
- [ ] Permission-based access control
- [ ] Custom validation rules

Please specify any additional features needed.
```

**Purpose**: Identify extra functionality requirements

### Clarification Response Template

AI should respond with this format:

```markdown
I'll help you create the {route-name} route! Before generating the implementation plan, I need to clarify a few details:

## 1. Table Display Fields

[Ask question about which fields to display in table]

## 2. Form Fields and Components

[Ask about form fields and their UI components]

## 3. CRUD Operations Scope

[Ask about which operations are needed]

## 4. Additional Features

[Ask about extra functionality]

Once you provide these details, I'll generate a comprehensive task file for your review.
```

## Task File Structure

### File Naming Convention

```
.cursor/tasks/{route-name}-{DD-MM-YY}.md
```

Example: `.cursor/tasks/products-13-08-25.md`

### Required Sections

#### 1. Route Overview

- Route name and purpose
- Main functionality description
- User roles/permissions if applicable

#### 2. Path Definitions

- List all paths to be added to `src/route/paths.ts`
- Follow existing naming conventions

#### 3. Schema Definition

- Data structure and types
- Validation rules using Zod
- API response/request schemas

#### 4. Database/API Integration

- API endpoints to be added to `src/lib/api-paths.ts`
- Server functions and actions needed
- CRUD operations required

#### 5. Component Architecture

- List view component
- Details view component
- Create/Edit form component
- Any additional components

#### 6. Navigation Integration

- Where to add navigation links
- Menu updates if needed
- Breadcrumb considerations

#### 7. File Structure

- Complete list of files to be created
- Folder organization
- Import/export structure

#### 8. Implementation Order

- Step-by-step implementation sequence
- Dependencies between components
- Testing checkpoints

## Task File Template

````markdown
# {Route Name} - Route Generation Task

**Date**: {DD-MM-YY}  
**Status**: Pending Review

## 1. Route Overview

- **Route Name**: {route-name}
- **Purpose**: {description of functionality}
- **Features**:
  - [ ] List/Browse {items}
  - [ ] View {item} details
  - [ ] Create new {item}
  - [ ] Edit existing {item}
  - [ ] Delete {item}
  - [ ] {Additional features}

## 2. Path Definitions

Add to `src/route/paths.ts`:

```typescript
{routeName}: {
  root: '/{route-path}',
  new: '/{route-path}/new',
  edit: (id: string) => `/{route-path}/${id}/edit`,
  details: (id: string) => `/{route-path}/${id}`,
},
```
````

## 3. Schema Definition

Create `src/lib/schemas/{route-name}-schema.ts`:

- [ ] Base {Item} type
- [ ] {Item}Response type
- [ ] {Item}Create type
- [ ] {Item}Update type
- [ ] {Item}ListResponse type
- [ ] Form validation schemas
- [ ] API response schemas

## 4. Database/API Integration

Add to `src/lib/api-paths.ts`:

- [ ] {ROUTE_NAME}\_PATHS with CRUD endpoints
- [ ] GET_ALL, GET_BY_ID, CREATE, UPDATE, DELETE paths

Create server functions and actions:

- [ ] `src/server/functions/{route-name}-functions.ts`
- [ ] `src/server/actions/{route-name}-actions.ts`

## 5. Component Architecture

Create components:

- [ ] `src/pages/{route-name}/views/{route-name}-list-view.tsx`
- [ ] `src/pages/{route-name}/views/{route-name}-details-view.tsx`
- [ ] `src/pages/{route-name}/views/{route-name}-create-edit-view.tsx`
- [ ] `src/pages/{route-name}/hooks/use-{route-name}-column.tsx`

## 6. Navigation Integration

- [ ] Add navigation links to main menu/sidebar
- [ ] Update breadcrumb components if needed
- [ ] Add route to navigation configuration

## 7. File Structure

```
src/
├── lib/
│   ├── api-paths.ts (update)
│   └── schemas/
│       └── {route-name}-schema.ts (new)
├── pages/
│   └── {route-name}/
│       ├── hooks/
│       │   └── use-{route-name}-column.tsx (new)
│       └── views/
│           ├── {route-name}-list-view.tsx (new)
│           ├── {route-name}-details-view.tsx (new)
│           └── {route-name}-create-edit-view.tsx (new)
├── route/
│   └── paths.ts (update)
└── server/
    ├── actions/
    │   └── {route-name}-actions.ts (new)
    └── functions/
        └── {route-name}-functions.ts (new)
```

## 8. Implementation Order

1. [ ] Update `src/route/paths.ts` with new paths
2. [ ] Create schema definitions
3. [ ] Update API paths configuration
4. [ ] Create server functions (queries)
5. [ ] Create server actions (mutations)
6. [ ] Create list view component
7. [ ] Create details view component
8. [ ] Create create/edit form component
9. [ ] Create column hooks for data table
10. [ ] Add navigation integration
11. [ ] Test all CRUD operations
12. [ ] Verify path constants usage

## Notes

- Follow existing patterns from users/topics routes
- Ensure all navigation uses path constants from `paths.ts`
- Apply consistent styling and component patterns
- Include proper error handling and loading states
- Add proper TypeScript types throughout

## Review Checklist

- [ ] All required files identified
- [ ] Implementation order makes sense
- [ ] Follows existing project patterns
- [ ] Navigation paths properly defined
- [ ] Schema structure is appropriate
- [ ] Component architecture is consistent

---

**Instructions**: Review this task file, make any necessary adjustments, then respond with "go ahead" to begin implementation.

```

## Usage Guidelines

### When to Trigger Interactive Clarification
- User requests creating a new route with URL and data shape
- User mentions "end-to-end route creation"
- User provides API data structure or JSON sample
- Request involves creating complete CRUD operations
- User asks for table/form functionality with specific data

**Always ask clarification questions BEFORE generating any task file when these conditions are met.**

### When to Generate Task Files
- Creating entirely new routes/features
- Major refactoring involving multiple files
- Complex implementations requiring planning
- When user specifically requests task-based approach

### Task File Location
All task files must be created in `.cursor/tasks/` directory with the naming convention:
`{route-name}-{DD-MM-YY}.md`

### User Interaction Flow
1. **User**: Provides URL and data shape for new route creation
2. **AI**: "I'll help you create the {route-name} route! Before generating the implementation plan, I need to clarify a few details:"
3. **AI**: Asks clarification questions about table fields, form components, CRUD scope, and additional features
4. **User**: Provides answers to clarification questions
5. **AI**: "Based on your requirements, I'll create a comprehensive task file."
6. **AI**: Creates task file in `.cursor/tasks/` incorporating user's clarifications
7. **AI**: "Please review the task file at `.cursor/tasks/{route-name}-{DD-MM-YY}.md` and let me know if you'd like any changes."
8. **User**: Reviews and potentially updates the file manually or via prompts
9. **User**: Says "go ahead" or similar confirmation
10. **AI**: Executes the implementation following the task file exactly

### Implementation Rules
- Always follow the task file exactly as written
- Check off completed items as you progress
- If deviations are needed, explain why
- Update the task file status upon completion
- Reference the task file in commit messages

## Benefits

- **Requirements Clarity**: Interactive clarification ensures exact understanding of needs
- **Appropriate UI Components**: Smart inference of form components based on data types
- **Scope Precision**: Clear definition of CRUD operations needed vs. optional features
- **User-Friendly Interaction**: Easy copy-paste field selection with helpful hints
- **Structured Planning**: Clear roadmap before implementation based on clarified requirements
- **Manual Review**: User can adjust scope and approach in both clarification and task phases
- **Consistency**: Follows established patterns and conventions
- **Documentation**: Creates permanent record of implementation decisions including requirements
- **Quality Control**: Reduces errors through upfront planning and requirement validation
- **Flexibility**: Allows modifications at both clarification and task review stages

This enhanced approach ensures thoughtful, consistent route creation while maintaining project standards and providing multiple touchpoints for user input and refinement.
```
